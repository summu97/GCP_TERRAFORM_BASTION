pipeline {
    agent {
        label 'docker'
    }
    environment {
        ANSIBLE_INVENTORY_PATH = "/var/lib/jenkins/inventory.ini"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/summu97/ASSESMENT.git'
            }
        }
        stage('init') {
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/pipeline-1/terraform-desktop
                terraform init
                '''
            }
        }
        stage('plan') {
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/pipeline-1/terraform-desktop
                terraform plan
                '''
            }
        }
        stage('action') {
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/pipeline-1/terraform-desktop
                terraform $action --auto-approve
                '''
            }
        }
        stage('Create Inventory File') {
            steps {
                script {
                    sh '''
                    sudo touch ${ANSIBLE_INVENTORY_PATH}
                    private_ip=$(gcloud compute instances describe default-desktop-server --zone us-west1-b	 --format='value(networkInterfaces[0].networkIP)')
                    echo "[sumo]" | sudo tee -a ${ANSIBLE_INVENTORY_PATH}
                    echo "${private_ip}" | sudo tee -a ${ANSIBLE_INVENTORY_PATH}
                    '''
                }
            }
        }
        stage('Configure Ansible') {
            steps {
                script {
                    sh '''
                    if ! grep -q "^[defaults]" /etc/ansible/ansible.cfg; then
                        echo "[defaults]" | sudo tee -a /etc/ansible/ansible.cfg
                    fi

                    echo 'host_key_checking = False' | sudo tee -a /etc/ansible/ansible.cfg
                    '''
                }
            }
        }
        stage('instance wait time for 60 seconds') {
            steps{
                script{
                    sleep(time: 60, unit: 'SECONDS')
                }
            }
        }
        stage('ping') {
            steps {
                sh '''
                ansible all -i /var/lib/jenkins/inventory.ini -m ping -u root
                '''
            }
        }
        stage('playbook') {
            steps {
                sh 'ansible-playbook -i /var/lib/jenkins/inventory.ini playbook.yml -u root'
            }
        }
    }
}
===============================
pipeline {
    agent {
        label 'docker'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'sumanth', url: 'https://github.com/summu97/PROJECT-001.git'
            }
        }
        stage('tfm_init') {
            when {
                expression {
                    return tfm_action in ['init', 'plan', 'apply', 'destroy']
                }
            }
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform init
                '''
            }
        }
        stage('tfm_plan') {
            when {
                expression {
                    return tfm_action == 'plan'
                }
            }
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform plan --var-file="terraform.tfvars"
                '''
            }
        }
        stage('Check Existing Resources') {
            when {
                expression {
                    return tfm_action == 'apply'
                }
            }
            steps {
                script {
                    def tfState = sh(script: '''
                        cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                        terraform state list
                    ''', returnStdout: true).trim()

                    if (tfState) {
                        echo 'Existing Terraform state found.'
                        env.TF_STATE_EXISTS = 'true'
                    } else {
                        echo 'No existing Terraform state found.'
                        env.TF_STATE_EXISTS = 'false'
                    }
                    echo "TF_STATE_EXISTS: ${env.TF_STATE_EXISTS}"
                }
            }
        }
        stage('Recreate_infra') {
            when {
                expression {
                    return env.TF_STATE_EXISTS == 'true'
                }
            }
            steps {
                script {
                    def recreate = input message: 'Existing Terraform resources detected. Do you want to recreate them?', ok: 'Proceed', parameters: [choice(name: 'RECREATE', choices: 'yes\nno', description: 'Recreate resources?')]
                    echo "User selected: ${recreate}"
                    env.RECREATE_RESOURCES = recreate
                    if (recreate == 'no') {
                        currentBuild.result = 'ABORTED'
                        error 'Build aborted by user.'
                    }
                }
            }
        }
        stage('tfm_apply') {
            when {
                expression {
                    return tfm_action == 'apply' && (env.TF_STATE_EXISTS == 'false' || env.RECREATE_RESOURCES == 'yes')
                }
            }
            steps {
                sh '''
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform apply --auto-approve --var-file="terraform.tfvars"
                '''
            }
        }
        stage('tfm_destroy') {
            when {
                expression {
                    return tfm_action == 'destroy'
                }
            }
            steps {
                script {
                    input message: 'Are you sure you want to destroy the infrastructure?', ok: 'Yes'
                }
                sh '''
                cd /var/lib/jenkins/workspace/desktop/adq-ubuntu-desktop/terraform/environments/$ENV
                terraform destroy --auto-approve --var-file="terraform.tfvars"
                '''
            }
        }
    }
}
